{"version":3,"sources":["serviceWorker.js","store/user/selectors.js","store/contacts/selectors.js","store/selectors.js","components/navbar.jsx","store/initState.js","store/actionTypes.js","store/reducer.js","store/contacts/reducer.js","store/user/reducer.js","store/index.js","store/contacts/actions.js","components/progress.jsx","pages/import/index.jsx","components/modal.jsx","components/associateCard.jsx","components/contactCard.jsx","pages/manage/index.jsx","pages/list/index.jsx","App.jsx","pages/index.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","getUserName","userState","username","getFirstName","firstName","getUser","getContacts","association","allContacts","filter","contact","Object","toConsumableArray","getUnidentifiedContacts","getUnidentifiedCount","unidentifiedContactsCount","scopeDefiner","selectors","scopeId","keys","reduce","prev","key","objectSpread","defineProperty","_len","arguments","length","args","Array","_key","apply","concat","store_selectors","user","userSelectors","contacts","contactsSelectors","NavBarComponent","react","className","href","this","props","React","connect","initState","accountType","lastName","actionTypes","UserProfile","USER_LOGIN","USER_LOGOUT","USER_PROFILE_UPDATE","GET_CONTACTS","REQUEST","SUCCESS","FAILURE","CHANGE_ASSOCIATION","combineReducers","action","type","assign","contactId","associationType","find","id","undefined","middleWares","thunk","createLogger","diff","createStore","reducers","compose","applyMiddleware","fetchUserContacts","_x","_x2","_x3","_x4","_fetchUserContacts","_callee3","dispatch","history","accountSource","regenerator_default","a","wrap","_context3","next","fetch","_ref","asyncToGenerator","mark","_callee2","response","_context2","json","_ref2","_callee","data","_context","push","pathname","stop","_x6","_x5","ProgressIndicator","secondClassName","currentStage","firstClassName","ImportLOC","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onImportClick","bind","assertThisInitialized","isImporting","fromBtn","addContacts","setState","_this2","progress","onClick","withRouter","actions","SideOpenModal","closeBtn","react_default","createElement","toggle","Fragment","Modal","isOpen","fade","ModalHeader","close","headerText","children","Component","AssociateCard","sideColorClass","sideButtonClass","success","warning","sideHeader","sideCount","helpBlock","onButtonClick","buttonText","ContactCard","associateClass","isSelected","onCardSelect","email","phone","ManageLOC","associations","toggleFamily","toggleUnidentified","getFamilyModal","getUnidentifiedModal","getContactCard","selectedUser","associateUser","selectAssociation","familyModal","UnidentifiedModal","selectedAssociation","unidentifiedCount","toString","userList","arrowIcon","map","contactCard","changeAssociation","modal","associatedContacts","ModalBody","_this3","unAssociatedContacts","street","name","ModalFooter","associateCard","Link","to","ListLOC","getTable","list","Table","bordered","borderless","striped","hover","App","es","store","navbar","BrowserRouter","Switch","Redirect","from","exact","Route","path","component","Import","List","Manage","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b94eb8d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @author prajwalmr62\r\n * selectors for user state.\r\n */\r\n\r\n/**\r\n * get user's username\r\n * @param {Object} userState user state \r\n */\r\nexport const getUserName = (userState) => userState.username;\r\n\r\n/**\r\n * get user's first name\r\n * @param {Object} state user state\r\n */\r\nexport const getFirstName = (state) => {\r\n    return state.firstName;\r\n}\r\n\r\n/**\r\n * get user object\r\n * @param {Object} state user object\r\n */\r\nexport const getUser = state => state;","/**\r\n * @author prajwalmr62\r\n * contact selectors\r\n */\r\n\r\n/**\r\n * get contact list \r\n * @param {Object} state contact state \r\n * @param {string} association optional, gets specified association only. \r\n */\r\nexport const getContacts = (state, association)  =>{\r\n    if(association){\r\n        if(association === \"*\"){\r\n            return state.allContacts.filter(contact => contact.association);\r\n        }\r\n        return state.allContacts.filter(contact => contact.association === association);\r\n    }\r\n    return [...state.allContacts];\r\n}\r\n\r\nexport const getUnidentifiedContacts = (state)  =>{\r\n        return state.allContacts.filter(contact => !contact.association);\r\n}\r\n\r\nexport const getUnidentifiedCount = (state) => state.unidentifiedContactsCount;","/**\r\n * @author prajwalmr62\r\n * application selectors export file.\r\n */\r\n\r\n// selector imports\r\nimport * as userSelectors from \"./user/selectors\";\r\nimport * as contactsSelectors from \"./contacts/selectors\";\r\n\r\n/**\r\n * This is for defining scope of selectors. i.e. User selector will be obtaining only state\r\n * related to user object of the state.\r\n * @param {object} selectors selectors object imported from selector files.\r\n * @param {string} scopeId Id of scope to which selector should be limited.\r\n */\r\nconst scopeDefiner = (selectors, scopeId) =>\r\n  Object.keys(selectors).reduce((prev, key) => {\r\n    return {\r\n      ...prev,\r\n      [key]: (state, ...args) => selectors[key](state[scopeId], ...args)\r\n    };\r\n  }, {});\r\n\r\n// get redefined selectors\r\nconst user = scopeDefiner(userSelectors, 'user');\r\nconst contacts = scopeDefiner(contactsSelectors, 'contacts');\r\n\r\nexport default {\r\n    user,\r\n    contacts\r\n}","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import { Navbar, NavbarBrand } from \"reactstrap\";\r\nimport selectors from \"../store/selectors\";\r\n\r\nclass NavBarComponent extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"bg-primary navbar navbar-md px-5 py-3\">\r\n        <a className=\"navbar-brand text-light\" href=\"/\">Hello {this.props.firstName}!</a>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default connect((state)=>{\r\n    return {\r\n        firstName: selectors.user.getFirstName(state)\r\n    }\r\n  })(NavBarComponent);\r\n\r\n  ","/**\r\n * @author prajwalmr62\r\n * initial state of store. This file is being referred in reducers to\r\n * fetch their initial state, if not present.\r\n */\r\n\r\nexport default {\r\n    user: {\r\n        username: 'Joanne.124',\r\n        accountType: 'user',\r\n        firstName: 'Joanne',\r\n        lastName: 'Smith'\r\n    },\r\n    contacts: {\r\n        allContacts : [],\r\n        unidentifiedContactsCount: 0,\r\n    }\r\n}","/**\r\n * @author prajwalmr62\r\n * available action types\r\n */\r\n\r\n/**\r\n * exports all the available action types.\r\n */\r\nexport default {\r\n    \r\n    /**\r\n     * related to user login process.\r\n     */\r\n    UserProfile : {\r\n        USER_LOGIN: \"user/USER_LOGIN\",\r\n        USER_LOGOUT: \"user/LOGOUT\",\r\n        USER_PROFILE_UPDATE: \"user/PROFILE_UPDATE\"\r\n    },\r\n\r\n    /**\r\n     * related to contacts managements, like import, modify etc.\r\n     */\r\n    contacts : {\r\n        GET_CONTACTS: {\r\n            REQUEST: \"contacts/REQUEST_CONTACTS\",\r\n            SUCCESS: \"contacts/SUCCESS\",\r\n            FAILURE: \"contacts/FAILURE\"\r\n        },\r\n        CHANGE_ASSOCIATION : \"contacts/CHANGE_ASSOCIATION\",\r\n    }\r\n}","/**\r\n * @author prajwalmr62\r\n * application reducers export file.\r\n */\r\n\r\n\r\n// dependency imports\r\nimport { combineReducers } from \"redux\";\r\n\r\n// reducers import\r\nimport contacts from \"./contacts/reducer\";\r\nimport user from \"./user/reducer\";\r\n\r\n// combine reducers and export as single reducer.\r\nexport default combineReducers({\r\n    contacts, \r\n    user\r\n});","/**\r\n * @author prajwalmr62\r\n * contact reducers\r\n */\r\n\r\n// required imports\r\nimport initState from \"../initState\";\r\nimport actionTypes from \"../actionTypes\";\r\n\r\n/**\r\n * contact reducer\r\n * @param {Object} state contact state\r\n * @param {Action} action called action\r\n */\r\nexport default function(state, action){\r\n\r\n    if(action.type === actionTypes.contacts.GET_CONTACTS.SUCCESS){\r\n        const { allContacts } = action;\r\n\r\n        return Object.assign({}, state, {\r\n            allContacts,\r\n            unidentifiedContactsCount: allContacts.filter(contact => !contact.association).length\r\n        });\r\n    }\r\n    else if (action.type === actionTypes.contacts.CHANGE_ASSOCIATION){\r\n        const { contactId, associationType} = action;\r\n        const allContacts = [...state.allContacts];\r\n        let contact = allContacts.find(contact => contact.id === contactId);\r\n        contact.association = associationType;\r\n        return Object.assign({}, state, {\r\n            allContacts,\r\n            unidentifiedContactsCount: allContacts.filter(contact => !contact.association).length\r\n        })\r\n    } else if(!state){\r\n        return initState.contacts;\r\n    }\r\n    return state;\r\n}","/**\r\n * @author prajwalmr62\r\n * reducers for user actions.\r\n */\r\n\r\n// action and initial state import\r\nimport actionTypes from \"../actionTypes\";\r\nimport initState from \"../initState\";\r\n\r\n/**\r\n * base user reducer. \r\n * @param {Object} state user state.\r\n * @param {Action} action called action\r\n */\r\nexport default function(state, action){\r\n\r\n    if(action.type=== actionTypes.UserProfile.USER_LOGIN){\r\n        const { username, accountType, firstName, lastName } = action;\r\n        return Object.assign({}, state, {\r\n            username,\r\n            accountType,\r\n            firstName,\r\n            lastName\r\n        })\r\n    }\r\n\r\n    else if(action.type === actionTypes.UserProfile.USER_PROFILE_UPDATE){\r\n        const { firstName, lastName } = action;\r\n        return Object.assign({}, state, {\r\n            firstName,\r\n            lastName\r\n        });\r\n    }\r\n\r\n    else if (action.type === actionTypes.UserProfile.USER_LOGOUT || state === undefined){\r\n        return initState.user;\r\n    }\r\n\r\n    return state;\r\n}","/**\r\n * @author prajwalmr62\r\n * creates and exposes store.\r\n */\r\n\r\n// dependency import\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\n\r\n// import combiner reducer.\r\nimport reducers from \"./reducer\";\r\n\r\n// get middleware array\r\nconst middleWares = [thunk, createLogger({diff: true})];\r\n\r\n// export the store. \r\nexport default createStore(reducers, compose(applyMiddleware(...middleWares)));","/**\r\n * @author prajwalmr62\r\n * action creators for contact management\r\n */\r\n\r\n // action list imports\r\nimport actionTypes from \"../actionTypes\";\r\n\r\n/**\r\n * change contact's association with user\r\n * @param {string} contactId contact Id to be updated \r\n * @param {*} associationType type of association with user\r\n */\r\nexport function changeContactAssociation(contactId, associationType){\r\n\r\n    return {\r\n        type: actionTypes.contacts.CHANGE_ASSOCIATION,\r\n        contactId,\r\n        associationType,\r\n    }\r\n}\r\n\r\n/**\r\n * get user's contact list from service. This action has side-effects.\r\n * @param {dispatch} dispatch redux dispatch method \r\n * @param {history} history react router history API \r\n * @param {string} username user name \r\n * @param {string} accountSource from which account to be fetched. \r\n */\r\nexport async function fetchUserContacts(dispatch, history, username, accountSource){\r\n    dispatch({\r\n        type: actionTypes.contacts.GET_CONTACTS.REQUEST\r\n    });\r\n    fetch('https://my.api.mockaroo.com/user_contact_import.json?key=6a969fd0').then( async (response)=>{\r\n        response.json().then(async data=> {\r\n            const allContacts = data;\r\n            await dispatch({\r\n                type: actionTypes.contacts.GET_CONTACTS.SUCCESS,\r\n                allContacts,\r\n            });\r\n            history.push({\r\n                pathname:'/manage'\r\n            })\r\n        });\r\n        \r\n    });\r\n}","import * as React from \"react\";\r\n\r\nclass ProgressIndicator extends React.Component {\r\n  render() {\r\n    const secondClassName = this.props.currentStage === \"2\"? \"next-to-be\": \"\";\r\n    const firstClassName = this.props.currentStage === \"1\"? \"next-to-be\" : secondClassName? \"completed\": \"\";\r\n    return (\r\n      <ul className=\"progress-indicator py-5\">\r\n        <li className={firstClassName}>\r\n          <span className=\"bubble\" />\r\n        </li>\r\n        <li className={secondClassName}>\r\n          <span className=\"bubble\" />\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProgressIndicator;\r\n","/**\r\n * @author prajwalmr62\r\n * import page\r\n */\r\n\r\n\r\n// required imports\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\n\r\n// components import\r\nimport selectors from \"../../store/selectors\";\r\nimport * as actions from \"../../store/contacts/actions\";\r\nimport Progress from \"../../components/progress\";\r\n\r\n/**\r\n * Import page component\r\n */\r\nclass ImportLOC extends React.Component {\r\n\r\n    /**\r\n     * constructor for import loc\r\n     * @param {Object} props props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.onImportClick = this.onImportClick.bind(this);\r\n        this.state = { isImporting: false };\r\n\r\n    }\r\n\r\n    /**\r\n     * on click of btn import\r\n     * @param {string} fromBtn source of contacts\r\n     */\r\n    onImportClick(fromBtn) {\r\n        this.props.addContacts(this.props.history, this.props.user.username, fromBtn);\r\n        this.setState({ isImporting: true });\r\n    }\r\n\r\n    /**\r\n     * Render method\r\n     * TODO: Create more components from this page.\r\n     */\r\n    render() {\r\n        return (<React.Fragment>\r\n            <div className=\"row\">\r\n                <div className=\"col col-md-7 offset-md-2\">\r\n                    <Progress currentStage=\"1\"></Progress>\r\n                    <div className=\"row justify-content-between no-gutters\">\r\n                        <span className=\"text-dark header-align font-weight-bold\">Import your contacts</span>\r\n                        <button className=\"btn text-dark font-weight-bold\">Help?</button>\r\n                    </div>\r\n                    <div className=\"card card-shadow\">\r\n                        <div className=\"text-center card-header bg-gray-1 text-light\"> Select a platform to import contacts</div>\r\n\r\n                        {!this.state.isImporting &&\r\n                            <div className=\"card-body justify-content-around no-gutters row p-5\">\r\n                                <button className=\"contact-button\" onClick={()=> this.onImportClick('google')} ><i className=\"fab fa-google\"></i></button>\r\n                                <button className=\"contact-button\" onClick={()=> this.onImportClick('facebook')} ><i className=\"fab fa-facebook\"></i></button>\r\n                                <button className=\"contact-button\" onClick={()=> this.onImportClick('contacts')} ><i className=\"fas fa-address-card\"></i></button>\r\n                            </div>\r\n                        }\r\n                        {this.state.isImporting &&\r\n                            <div className=\"card-body justify-content-around no-gutters row p-5\">\r\n                                <div className='loader'></div>\r\n                                <p className=\"font-weight-bold pt-5 w-100 text-center\">Please wait while we fetch your contacts...</p>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>);\r\n    }\r\n}\r\n\r\n/**\r\n * start to props mapper\r\n * @param {object} state \r\n */\r\nfunction matchStateToProps(state) {\r\n    return {\r\n        user: selectors.user.getUser(state)\r\n    };\r\n}\r\n\r\n/**\r\n * state to dispatch mapper\r\n * @param {object} dispatch \r\n */\r\nfunction matchDispatchToProps(dispatch) {\r\n    return {\r\n        addContacts: (history, username, accountSource) => {\r\n            actions.fetchUserContacts(dispatch, history, username, accountSource);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * exported HOC\r\n */\r\nexport default withRouter(connect(matchStateToProps, matchDispatchToProps)(ImportLOC));","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React from 'react';\r\nimport { Modal, ModalHeader } from 'reactstrap';\r\n\r\nclass SideOpenModal extends React.Component {\r\n\r\n  render() {\r\n    const closeBtn = <button className=\"close\" onClick={this.props.toggle}>&times;</button>;\r\n    return (\r\n      <React.Fragment>\r\n        <Modal isOpen={this.props.isOpen} fade={false}  toggle={this.props.toggle} className={\"side-modal\"}>\r\n          <ModalHeader className={\"bg-gray-1 text-light\"} toggle={this.props.toggle} close={closeBtn}>{this.props.headerText}</ModalHeader>\r\n          {this.props.children}\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideOpenModal;","import * as React from \"react\";\r\n\r\nclass AssociateCard extends React.Component {\r\n    render() {\r\n        let sideColorClass = \"\";\r\n        let sideButtonClass = \"\";\r\n        if(this.props.success){\r\n            sideColorClass = \"bg-success\";\r\n            sideButtonClass = \"bg-success-light\";\r\n        } else if(this.props.warning){\r\n            sideColorClass=\"bg-warning\";\r\n            sideButtonClass=\"bg-warning-light\";\r\n        }\r\n        return (\r\n            <div className=\"mb-5 card card-rounded\">\r\n                <div className=\"row no-gutters\">\r\n                    <div className={sideColorClass + \" col-4 px-1 py-2 text-light text-center card-left-rounded \"}>\r\n                        <p className=\"label font-weight-bold\">{this.props.sideHeader}</p>\r\n                        <p className=\"count font-weight-bold\">{this.props.sideCount}</p>\r\n                    </div>\r\n                    <div className=\"col-8\">\r\n                        <p className=\"side-pane-top\">{this.props.helpBlock}</p>\r\n                        <button onClick={this.props.onButtonClick} className={sideButtonClass + \" side-pane-bottom-button\"}>{this.props.buttonText}<i className=\"fas fa-chevron-right pl-3\"></i></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssociateCard;\r\n\r\n","import * as React from \"react\";\r\n\r\nclass ContactCard extends React.Component {\r\n    render() {\r\n         const associateClass = this.props.isSelected? \"bg-success text-white\": \"bg-secondary text-dark\";\r\n        return (\r\n            <div className=\"card contact-card card-shadow mt-2\" onClick={this.props.onCardSelect}>\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-9 text-center p-3\">\r\n                        <span className=\"contact-name font-weight-bold text-center\">\r\n                            {this.props.firstName + \" \" + this.props.lastName}\r\n                        </span>\r\n                        <div className=\"additional-info row no-gutters justify-content-around\">\r\n                            <div className=\"info\">\r\n                                <i className=\"fas fa-envelope text-danger\"></i> {this.props.email}\r\n                            </div>\r\n                            <div className=\"info\">\r\n                                <i className=\"fas fa-phone  text-danger\"></i>{this.props.phone}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={associateClass + \" col-3 associate-card-addon text-center font-weight-bold\"}>\r\n                        {this.props.association}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactCard;\r\n\r\n","/**\r\n * @author prajwalmr62\r\n * contact manage component\r\n */\r\n\r\n // required imports\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport { ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\n// redux related\r\nimport selectors from \"../../store/selectors\";\r\nimport * as actions from \"../../store/contacts/actions\";\r\n\r\n// component imports\r\nimport Progress from \"../../components/progress\";\r\nimport Modal from \"../../components/modal\";\r\nimport AssociateCard from \"../../components/associateCard\";\r\nimport ContactCard from \"../../components/contactCard\";\r\n\r\n/**\r\n * manage page LOC\r\n */\r\nclass ManageLOC extends React.Component {\r\n\r\n    /**\r\n     * Association available.\r\n     * TODO: Move it to store\r\n     */\r\n    associations = [\"father\", \"mother\", \"brother\", \"sister\"];\r\n    \r\n    /**\r\n     * header text to be displayed for unidentified modal\r\n     */\r\n    headerText= \"\";\r\n\r\n    /**\r\n     * constructor\r\n     * @param {object} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleFamily = this.toggleFamily.bind(this);\r\n        this.toggleUnidentified = this.toggleUnidentified.bind(this);\r\n        this.getFamilyModal = this.getFamilyModal.bind(this);\r\n        this.getUnidentifiedModal = this.getUnidentifiedModal.bind(this);\r\n        this.getContactCard = this.getContactCard.bind(this);\r\n        this.selectedUser = this.selectedUser.bind(this);\r\n        this.associateUser = this.associateUser.bind(this);\r\n        this.selectAssociation = this.selectAssociation.bind(this);\r\n        this.state = {\r\n            familyModal: false,\r\n            UnidentifiedModal: false,\r\n            selectedUser: null,\r\n            selectedAssociation: null,\r\n            headerText : \"Unidentified (\" + this.props.unidentifiedCount.toString() + \")\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * toggle family modal\r\n     */\r\n    toggleFamily() {\r\n        this.setState({\r\n            familyModal: !this.state.familyModal,\r\n            selectedUser: null,\r\n            selectedAssociation: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * toggle unidentified modal\r\n     */\r\n    toggleUnidentified() {\r\n        this.setState({\r\n            UnidentifiedModal: !this.state.UnidentifiedModal,\r\n            selectedUser: null,\r\n            selectedAssociation: null,\r\n            headerText : \"Unidentified (\" + this.props.unidentifiedCount.toString() + \")\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * select an user\r\n     * @param {user} selectedUser user object\r\n     */\r\n    selectedUser(selectedUser) {\r\n        this.setState({ selectedUser, headerText: selectedUser.firstName + \" \" + selectedUser.lastName })\r\n    }\r\n\r\n    /**\r\n     * create user contact card\r\n     * @param {Array<user>} userList list of users\r\n     * @param {func} onClick func\r\n     */\r\n    getContactCard(userList, onClick) {\r\n        const arrowIcon = <i className=\"fas fa-2x fa-arrow-right\"></i>;\r\n        return userList.map(user => <ContactCard\r\n            key={user.id} email={user.email} phone={user.phone}\r\n            firstName={user.firstName} lastName={user.lastName}\r\n            onCardSelect={() => onClick? this.selectedUser(user): \"\"}\r\n            isSelected={user.association}\r\n            association={user.association ? user.association : arrowIcon}></ContactCard>)\r\n    }\r\n\r\n    /**\r\n     * get association clicked\r\n     * @param {string} selectedAssociation \r\n     */\r\n    selectAssociation(selectedAssociation) {\r\n        this.setState({ selectedAssociation });\r\n    }\r\n\r\n    /**\r\n     * on select, associate user with selected association\r\n     */\r\n    associateUser() {\r\n        this.props.changeAssociation(this.state.selectedUser.id, this.state.selectedAssociation);\r\n        this.setState({\r\n            familyModal: false,\r\n            UnidentifiedModal: false,\r\n            selectedUser: null,\r\n            selectedAssociation: null,\r\n            headerText : \"Unidentified (\" + this.props.unidentifiedCount.toString() + \")\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * creating family modal\r\n     * TODO: make new component\r\n     */\r\n    getFamilyModal() {\r\n        return (\r\n            <Modal toggle={this.toggleFamily} isOpen={this.state.familyModal} headerText={\"Family Members (\" + this.props.associatedContacts.length.toString() + \")\"}>\r\n                {!this.state.selectedUser &&\r\n                    <ModalBody>\r\n                        <p className=\"font-weight-bold mt-5\">Click a contact and select who is to you.</p>\r\n                        {\r\n                            this.getContactCard(this.props.associatedContacts)\r\n                        }\r\n                        {!this.props.associatedContacts.length &&\r\n                            <p>Nothing to show.</p>\r\n                        }\r\n                    </ModalBody>\r\n                }\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * get unidentified modal\r\n     * TODO: move it to new component\r\n     */\r\n    getUnidentifiedModal() {\r\n        return (\r\n            <Modal toggle={this.toggleUnidentified} isOpen={this.state.UnidentifiedModal} headerText={this.state.headerText} >\r\n                {!this.state.selectedUser &&\r\n                    <ModalBody>\r\n                        <p className=\"font-weight-bold\">Click a contact and select who is to you.</p>\r\n                        {\r\n                            this.getContactCard(this.props.unAssociatedContacts, true)\r\n                        }\r\n                        {!this.props.unAssociatedContacts.length &&\r\n                            <p>Nothing to show.</p>\r\n                        }\r\n                    </ModalBody>\r\n                }\r\n                {this.state.selectedUser &&\r\n                    <React.Fragment>\r\n                        <ModalBody>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"\">Who is {this.state.selectedUser.firstName + \" \" + this.state.selectedUser.lastName} is to you?</div>\r\n                                    <div className=\"additional-info row no-gutters justify-content-around\">\r\n                                        <div className=\"info\">\r\n                                            <i className=\"fas fa-map-marker-alt text-danger\"></i>{this.state.selectedUser.street}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-2\">\r\n                                {\r\n                                    this.associations.map(name => (<div key={name} onClick={() => this.selectAssociation(name)} className={this.state.selectedAssociation === name ? \"card mb-3 card-selected\" : \"card-not-selected card mb-3\"}>\r\n                                        <div className=\"card-body\">\r\n                                            {name}\r\n                                        </div>\r\n                                    </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        </ModalBody>\r\n                        <ModalFooter className=\"text-center\">\r\n                            {this.state.selectedAssociation &&\r\n                                <button className=\"btn btn-primary\" onClick={this.associateUser}>Select</button>\r\n                            }\r\n                        </ModalFooter>\r\n                    </React.Fragment>\r\n                }\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * render method\r\n     */\r\n    render() {\r\n        return (<React.Fragment>\r\n            <div className=\"align-items-center row\">\r\n                <div className=\"col col-md-7 offset-md-2\">\r\n                    <Progress currentStage=\"2\"></Progress>\r\n                    <div className=\"row justify-content-between no-gutters\">\r\n                        <span className=\"text-dark header-align font-weight-bold\">Manage Family</span>\r\n                        <button className=\"btn text-dark font-weight-bold\">Help?</button>\r\n                    </div>\r\n                    <div className=\"card card-shadow\">\r\n                        <div className=\"text-center card-header bg-gray-1 text-light\"> Choose your family members from the list of contacts you have updated</div>\r\n                        <div className=\"card-body p-5\">\r\n                            <AssociateCard success sideHeader=\"Family Members\" sideCount={this.props.associatedContacts.length.toString()} helpBlock=\"Your family members are listed here\" buttonText=\"Check your friends\" onButtonClick={this.toggleFamily} ></AssociateCard>\r\n                            <AssociateCard warning sideHeader=\"Unidentified\" sideCount={this.props.unidentifiedCount.toString()} helpBlock=\"Choose your family members and their relationship to you\" buttonText=\"Choose from this list\" onButtonClick={this.toggleUnidentified} ></AssociateCard>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"align-items-center col col-md-3 flex-column justify-content-center no-gutters row\">\r\n                <Link to=\"/list\"><button className=\"contact-list-button btn btn-success\"><i className=\"fa-2x fa-user-alt fas\"></i></button></Link>\r\n                <span className=\"font-weight-bold pt-4 text-center\">View Phonebook</span>\r\n                </div>\r\n            </div>\r\n            {this.getFamilyModal()}\r\n            {this.getUnidentifiedModal()}\r\n        </React.Fragment>);\r\n    }\r\n}\r\n\r\n/**\r\n * state to props mapper\r\n * @param {object} state \r\n */\r\nfunction matchStateToProps(state) {\r\n    return {\r\n        user: selectors.user.getUser(state),\r\n        associatedContacts: selectors.contacts.getContacts(state, \"*\"),\r\n        unAssociatedContacts: selectors.contacts.getUnidentifiedContacts(state),\r\n        unidentifiedCount: selectors.contacts.getUnidentifiedCount(state)\r\n    };\r\n}\r\n\r\n/**\r\n * state to dispatch mapper\r\n * @param {function} dispatch \r\n */\r\nfunction matchDispatchToProps(dispatch) {\r\n    return {\r\n        changeAssociation: (contactId, association)=>{\r\n            dispatch(actions.changeContactAssociation(contactId, association))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// export HOC\r\nexport default withRouter(connect(matchStateToProps, matchDispatchToProps)(ManageLOC));","/**\r\n * @author prajwalmr62\r\n * contacts listing page\r\n */\r\n\r\n // required imports\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Table } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// redux store related\r\nimport selectors from \"../../store/selectors\";\r\nimport * as actions from \"../../store/contacts/actions\";\r\n\r\n/**\r\n * contact listing LOC\r\n */\r\nclass ListLOC extends React.Component {\r\n\r\n    /**\r\n     * constructor\r\n     * @param {object} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.getTable = this.getTable.bind(this);\r\n    }\r\n\r\n    /**\r\n     * creates table object\r\n     * @param {userList} list user list \r\n     */\r\n    getTable(list) {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <Table bordered={false} borderless striped hover>\r\n                        <tbody>\r\n                            {\r\n                                list.map(user => (\r\n                                    <tr key={user.id}>\r\n                                        <td>\r\n                                            {user.firstName + \" \" + user.lastName}\r\n                                            {user.association &&\r\n                                                <span className=\"badge badge-success card-rounded ml-3\">{user.association}</span>\r\n                                            }\r\n                                        </td>\r\n                                        <td>\r\n                                            {user.email}\r\n                                        </td>\r\n                                        <td>\r\n                                            {user.phone}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * render method\r\n     * TODO: Make multiple components from this.\r\n     */\r\n    render() {\r\n        return (<React.Fragment>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h1>Contacts</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col text-right\">\r\n                    <Link to=\"/manage\" className=\"btn btn-link text-dark font-weight-bold\">Manage List</Link>\r\n                </div>\r\n            </div>\r\n            {this.props.associatedContacts.length > 0 &&\r\n                <React.Fragment>\r\n                    <h4 className=\"mt-2\">Family Member {\"(\" + this.props.associatedContacts.length + \")\"}</h4>\r\n                    {\r\n                        this.getTable(this.props.associatedContacts)\r\n                    }\r\n            </React.Fragment>\r\n            }\r\n            {this.props.unAssociatedContacts.length > 0 &&\r\n                <React.Fragment>\r\n                    <h4 className=\"mt-2\">Unidentified {\"(\" + this.props.unAssociatedContacts.length + \")\"}</h4>\r\n                    {\r\n                        this.getTable(this.props.unAssociatedContacts)\r\n                    }\r\n            </React.Fragment>\r\n            }\r\n        </React.Fragment>);\r\n    }\r\n}\r\n\r\n/**\r\n * state to props mapper\r\n * @param {state} state \r\n */\r\nfunction matchStateToProps(state) {\r\n    return {\r\n        user: selectors.user.getUser(state),\r\n        associatedContacts: selectors.contacts.getContacts(state, \"*\"),\r\n        unAssociatedContacts: selectors.contacts.getUnidentifiedContacts(state),\r\n        unidentifiedCount: selectors.contacts.getUnidentifiedCount(state)\r\n    };\r\n}\r\n\r\n/**\r\n * state to dispatch mapper\r\n * @param {function} dispatch \r\n */\r\nfunction matchDispatchToProps(dispatch) {\r\n    return {\r\n        addContacts: (history, username, accountSource) => {\r\n            actions.fetchUserContacts(dispatch, history, username, accountSource);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * HOC export\r\n */\r\nexport default withRouter(connect(matchStateToProps, matchDispatchToProps)(ListLOC));","/**\r\n * @author prajwalmr62\r\n * application entry point.\r\n */\r\n\r\n // dependency import\r\nimport React, { Component } from 'react';\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\n// app components import\r\nimport NavBar from \"./components/navbar\";\r\nimport store from \"./store\";\r\nimport routing from \"./pages\";\r\n\r\n// style import\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <NavBar></NavBar>\r\n        <div className=\"container\">\r\n          <Router>\r\n            {routing()}\r\n          </Router>\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/**\r\n * @author prajwalmr62\r\n * this is for page indexing / routing entry point\r\n */\r\nimport * as React from \"react\";\r\nimport { Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Import from \"./import\";\r\nimport Manage from \"./manage\";\r\nimport List from \"./list\";\r\n\r\nexport default () => {\r\n    return (\r\n        <Switch>\r\n            <Redirect from=\"/\" exact={true} to=\"/import\" />\r\n            <Route path=\"/import\" component={Import} />\r\n            <Route path=\"/list\" component={List}></Route>\r\n            <Route path=\"/manage\" component={Manage}></Route>\r\n        </Switch>\r\n    );\r\n}","/**\r\n * @author prajwalmr62\r\n * app binding\r\n */\r\n\r\n // dependency import\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// app components import\r\nimport App from './App.jsx';\r\n\r\n// style import\r\nimport './index.css';\r\nimport \"../node_modules/css_progress_wizard/css/progress-wizard.min.css\";\r\n\r\n\r\n// render app on root element\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}